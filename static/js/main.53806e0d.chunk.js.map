{"version":3,"sources":["components/quotes.js","components/firebase.js","components/admin-firebase.js","components/stageQuotes.js","components/admin.js","App.js","reportWebVitals.js","index.js"],"names":["Quotes","useState","quotes","setQuotes","useEffect","getQuotes","then","res","map","quote","index","Name","Quote","Email","Admin","Validated","app","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","getFirestore","userCollection","collection","auth","getAuth","signInWithGoogle","a","console","log","provider","GoogleAuthProvider","signInWithPopup","isAdmin","uid","q","query","where","getDocs","forEach","doc","user_data","data","limit","quoteList","docs","email","name","setDoc","Uid","logout","signOut","deleteDoc","StagingQuotes","getStagingQuotes","onClick","addQuote2User","AdminPage","user","setUid","setisAdmin","loading","setLoading","e","displayName","src","photoURL","alt","App","useAuthState","setQuote","basename","process","className","exact","path","to","type","onChange","target","value","addQuote2","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.53806e0d.chunk.js","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport {getQuotes} from './firebase'\r\nfunction Quotes(){\r\n      const [quotes,setQuotes]=useState([])\r\n      useEffect(()=>{\r\n            getQuotes()\r\n            .then(res=>{\r\n                  setQuotes(res)\r\n                  //console.log('a')\r\n            })\r\n      },[])\r\n      \r\n      return(\r\n            <div>\r\n                  <ul>\r\n                  {quotes.map((quote,index)=> (<li key={index}>A\r\n                        <ul>\r\n                        <li>{quote.Name}</li> \r\n                        <li>{quote.Quote}</li>\r\n                        <li>{quote.Email}</li>\r\n                        {quote.Admin?<li>True</li>:<li>False</li>}\r\n                        {quote.Validated?<li>True</li>:<li>False</li>}\r\n                        </ul>\r\n                  </li>))}\r\n                  </ul>\r\n            </div>\r\n      )\r\n}\r\n\r\nexport {Quotes}","import { initializeApp } from \"firebase/app\";\r\nimport { getFirestore, collection,getDocs,addDoc,setDoc,doc,query,limit,where} from 'firebase/firestore';\r\nimport { getAuth,GoogleAuthProvider , signInWithPopup} from \"firebase/auth\";\r\nimport { Quotes } from \"./quotes\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyC8u-tO86sDJxz1oInHPqgAE_f86WCLuFw\",\r\n  authDomain: \"lateral-command-256823.firebaseapp.com\",\r\n  databaseURL: \"https://lateral-command-256823.firebaseio.com\",\r\n  projectId: \"lateral-command-256823\",\r\n  storageBucket: \"lateral-command-256823.appspot.com\",\r\n  messagingSenderId: \"832224831258\",\r\n  appId: \"1:832224831258:web:48bec8b4a91a27e60e6ea3\",\r\n  measurementId: \"G-FLBKNZ8GJC\"\r\n};\r\n\r\n\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\nconst userCollection = collection(db, 'User');\r\n//console.log(userCollection)\r\n    \r\n//Authentication\r\nconst auth = getAuth();\r\nconst signInWithGoogle=async ()=>{\r\n      console.log('aaa' )\r\n      const provider = new GoogleAuthProvider();\r\n      \r\n      signInWithPopup(auth, provider)\r\n      \r\n}\r\n\r\nconst getUser =async(uid)=>{\r\n      const q=query(collection(db,'User'),where('Uid',\"==\",uid))\r\n      const querySnaphot=await getDocs(q);\r\n      let user_data\r\n      querySnaphot.forEach(doc=>{\r\n            user_data=doc.data()\r\n      })\r\n      console.log(user_data)\r\n      return user_data\r\n}\r\nconst isAdmin=async (uid)=>{\r\n      const q=query(collection(db,'Admins'),where('uid','==',uid))\r\n      const querySnaphot=await getDocs(q);\r\n      let user_data\r\n      querySnaphot.forEach(doc=>{\r\n            user_data=doc.data()\r\n      })\r\n      return user_data\r\n}\r\n//geting quotes\r\n\r\nasync function getQuotes(){\r\n      const q=query(userCollection,limit(20))\r\n      const quotes=await getDocs(q)\r\n \r\n      const quoteList=quotes.docs.map(doc=>doc.data())\r\n      \r\n      return quoteList\r\n}\r\nasync function getStagingQuotes(){\r\n      const q=query(collection(db,'Stageing'))\r\n      const quotes=await getDocs(q)\r\n \r\n      const quoteList=quotes.docs.map(doc=>doc.data())\r\n     // console.log(quoteList)\r\n      return quoteList\r\n}\r\n\r\n// getQuotes(userCollection)\r\n// .then(result=>{\r\n//       quotes=result\r\n//       return quotes\r\n// })\r\n// .then(quotes=>\r\n//       console.log(quotes)\r\n// )\r\n\r\n\r\n//     adding quotes\r\n// async function addQuote(name,email,quote,validated=false,admin=false){\r\n//       const Quote =await addDoc(userCollection,{\r\n//             Name:name,\r\n//             Email:email,\r\n//             Quote:quote,\r\n//             Validated:validated,\r\n//             Admin:admin\r\n//       })\r\n//       console.log(Quote.id)\r\n//       return Quote.id\r\n// }\r\n//addQuote(\"amaltest\",'amal@gmail,com','test1')\r\nasync function addQuote2(quote,uid,email,name)\r\n{     \r\n      console.log(quote,uid,email,name)\r\n      const Quote =await setDoc(doc(db,\"Stageing\",uid),{\r\n            Email:email,\r\n            Name:name,\r\n            Quote:quote,\r\n            Uid:uid\r\n      })\r\n}\r\n//addQuote(userCollection,\"Test\",\"test@gmail.com\",\"test's quote\")\r\n\r\nconst logout =()=>{\r\n      auth.signOut()\r\n}\r\n//addQuote2()\r\nexport {signInWithGoogle,auth,logout,getQuotes,addQuote2,getUser,getStagingQuotes,isAdmin}\r\n\r\n","import { initializeApp } from \"firebase/app\";\r\nimport { getFirestore,setDoc,doc , deleteDoc } from \"firebase/firestore\";\r\nconst firebaseConfig = {\r\n      apiKey: \"AIzaSyC8u-tO86sDJxz1oInHPqgAE_f86WCLuFw\",\r\n      authDomain: \"lateral-command-256823.firebaseapp.com\",\r\n      databaseURL: \"https://lateral-command-256823.firebaseio.com\",\r\n      projectId: \"lateral-command-256823\",\r\n      storageBucket: \"lateral-command-256823.appspot.com\",\r\n      messagingSenderId: \"832224831258\",\r\n      appId: \"1:832224831258:web:48bec8b4a91a27e60e6ea3\",\r\n      measurementId: \"G-FLBKNZ8GJC\"\r\n};\r\nconst app = initializeApp(firebaseConfig);\r\nconst db = getFirestore(app);\r\n\r\nasync function addQuote2User(quote,uid,email,name)\r\n{     \r\n      console.log(quote,uid,email,name)\r\n      await setDoc(doc(db,\"User\",uid),{\r\n            Email:email,\r\n            Name:name,\r\n            Quote:quote,\r\n            Uid:uid\r\n      })\r\n      console.log('user added')\r\n      await deleteDoc(doc(db,'Stageing',uid))\r\n      \r\n}\r\n\r\nexport {addQuote2User}","import { useEffect,useState } from \"react\";\r\nimport { getStagingQuotes } from \"./firebase\";\r\nimport {addQuote2User} from './admin-firebase'\r\nfunction StagingQuotes(){\r\n      const [quotes,setQuotes]=useState([])\r\n      useEffect(()=>{\r\n            getStagingQuotes()\r\n            .then(res=>{\r\n                  setQuotes(res)\r\n            })\r\n      },[])\r\n      return(\r\n            <div>\r\n                  <ul>\r\n                  {quotes.map((quote,index)=> (<li key={index}>A\r\n                        <ul>\r\n                        <li>{quote.Name}</li> \r\n                        <li>{quote.Quote}</li>\r\n                        <li>{quote.Email}</li>\r\n                        <li>{quote.Uid}</li>\r\n                        <button onClick={()=>addQuote2User(quote.Quote,quote.Uid,quote.Email,quote.Name)}>Confirm</button>\r\n                        </ul>\r\n                  </li>))}\r\n                  </ul>\r\n            </div>\r\n      )\r\n}\r\n\r\nexport {StagingQuotes}","import { useEffect, useState } from \"react\"\r\nimport {auth} from './firebase'\r\nimport {isAdmin} from \"./firebase\"\r\nimport {StagingQuotes} from './stageQuotes'\r\nimport { useAuthState } from 'react-firebase-hooks/auth'\r\nimport  { Redirect } from 'react-router-dom'\r\n\r\nfunction AdminPage({user}){\r\n      const [uid,setUid]=useState(\"\")\r\n      \r\n      const [Admin,setisAdmin]=useState(false)\r\n      const [loading,setLoading]=useState(false)\r\n      useEffect(()=>{\r\n            setLoading(true)\r\n            if(user)\r\n            {\r\n                  isAdmin(user.uid)\r\n                  .then(res=>{\r\n                        setUid(user.uid) \r\n                        try{\r\n                              setisAdmin(res.isAdmin)\r\n                        }\r\n                        catch(e)\r\n                        {\r\n                              console.log(e)\r\n                        }\r\n                        setLoading(false)\r\n                  })\r\n            \r\n      }\r\n\r\n      },[user])\r\n      function onInputChange(e) {\r\n            setUid(e.target.value)\r\n          }\r\n      return(\r\n            <div>\r\n\r\n                  {/* <input type=\"text\" value={uid} onChange={onInputChange}/>\r\n                 \r\n                  <br/>\r\n                  {uid}<br/> */}\r\n                  {user ? (\r\n          <>\r\n            <label>{user.email}</label><br />\r\n            <label>{user.displayName}</label><br />\r\n            <label>{user.uid}</label><br />\r\n            <img src={user.photoURL} alt=\"user\" /><br />\r\n            \r\n\r\n          </>\r\n        ) :\r\n          (<button>Login with google</button>)}\r\n                  <br/> <br/> <br/> <br/> <br/> <br/>\r\n                  {loading?<>Loading</>:<>{Admin?\r\n                  <>Admin\r\n                  <StagingQuotes/>\r\n                  </>\r\n                  :<>Not Admin\r\n                  You dont have acces\r\n                  </>}</>}\r\n                  <br/>\r\n                  \r\n            </div>\r\n      )\r\n}\r\n\r\nexport {AdminPage}","//import './App.css';\nimport React, { Component, useEffect, useState } from 'react';\nimport { auth, signInWithGoogle, logout, addQuote2, getUser } from './components/firebase'\nimport { useAuthState } from 'react-firebase-hooks/auth'\nimport { Quotes } from './components/quotes';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport { AdminPage } from './components/admin';\n\nfunction App() {\n  const [user] = useAuthState(auth)\n  const [quote, setQuote] = useState(\"\")\n\n  function onInputChange(e) {\n    setQuote(e.target.value)\n  }\n  function onButtonClick(e) {\n    if(user)\n    {\n      addQuote2(quote, user.uid, user.email, user.displayName);\n      console.log('quote added for staging')\n    }\n    \n  }\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n\n        <br />\n        <br />\n        \n        <Switch>\n          <Route exact path=\"/\">\n          <Link to=\"/admin\"><button>Admin</button></Link>\n        <br />\n        <div className=\"input-box\">\n          <label>Input</label>\n          <input type=\"text\" onChange={onInputChange}></input>\n          <button onClick={onButtonClick}>Submit</button>\n        </div>\n        <br /><br /><br />\n        {user ? (\n          <>\n            <label>{user.email}</label><br />\n            <label>{user.displayName}</label><br />\n            <label>{user.uid}</label><br />\n            <img src={user.photoURL} alt=\"user\" /><br />\n            <button onClick={logout}>Logout</button>\n\n          </>\n        ) :\n          (<button onClick={signInWithGoogle}>Login with google</button>)}\n\n        <br />\n        <Quotes />\n          </Route>\n          <Route exact path=\"/admin\">\n            <AdminPage user={user}/>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}